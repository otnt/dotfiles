[alias]

	# View abbreviated SHA, description, and history graph of the latest 20 commits
	l = log --pretty=oneline -n 20 --graph --abbrev-commit

	# View the current working tree status using the short format
	s = status -s

    # Show only current branch
    b = rev-parse --abbrev-ref HEAD
    # Show usual branches
    br = branch
    # Show verbose branches
	brs = branch -a

	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

	# Pull in remote changes and all its submodules
    # These two commands are for inner usage
	pullfromcurrentbranch = !"git pull origin `git b`; git submodule foreach git pull origin `git b`"
    pullfromsomebranch = !"git pull origin $1; git submodule foreach git pull origin `git b`"

    # git pl --> pull from origin/current branch
    # git pl branch_name --> pull from origin/branch_name
    pl = "!f() { if [ $1 ]; then git pullfromsomebranch $1 \nelse git pullfromcurrentbranch \n fi }; f"

    # Push to origin/current branch
    pso = !"git push origin `git b`"

	# Clone a repository including all submodules
	clone = clone --recursive

    # Add all changes
    aa = add -A

    # Commit
    c = "!f() {\nif [ \"$1\" ]; then\ngit commit -m \"$1\"\nelse\n echo 'missing comment, commit failed'\n fi }; f"
	# Commit all changes
    ca = "!f() {\nif [ \"$1\" ]; then\ngit aa && git c \"$1\"\nelse\n echo 'missing comment, commit failed'\n fi }; f"

	# Switch to a branch, creating it if necessary
	co = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

	# Show verbose output about tags, branches or remotes
	tags = tag -l
	remotes = remote -v

	# Amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD

	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"

	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"

	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	# Remove branches that have already been merged with master
	# a.k.a. ‘delete merged’
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

[core]

	# Use custom `.gitignore` and `.gitattributes`
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes

	# Treat spaces before tabs and all kinds of trailing whitespace as an error
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

	# Prevent showing files whose names contain non-ASCII symbols as unversioned.
	# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
	precomposeunicode = false

[color]

	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
	ui = auto

[color "branch"]

	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]

	meta = yellow bold
	frag = magenta bold # line info
	old = red # deletions
	new = green # additions

[color "status"]

	added = yellow
	changed = green
	untracked = cyan

[diff]

	# Detect copies as well as renames
	renames = copies

[diff "bin"]
	# Use `hexdump` to diff binary files
	textconv = hexdump -v -C

[help]

	# Automatically correct and execute mistyped commands
	autocorrect = 1

[merge]

	# Include summaries of merged commits in newly created merge commit messages
	log = true

[push]

	# Use the Git 1.x.x default to avoid errors on machines with old Git
	# installations. To use `simple` instead, add this to your `~/.extra` file:
	# `git config --global push.default simple`. See http://git.io/mMah-w.
	default = matching
	# Make `git push` push relevant annotated tags when pushing branches out.
	followTags = true

# URL shorthands

[url "git@github.com:"]

	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"

[url "git://github.com/"]

	insteadOf = "github:"

[url "git@gist.github.com:"]

	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]

	insteadOf = "gist:"

[credential]
	helper = cache --timeout=360000
